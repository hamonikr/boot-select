#!/bin/bash

# NAME: boot-select
# PATH: $HOME/bin
# DESC: 부팅 메뉴를 확인하면서 선택할 수 있도록 UI를 제공하는 부팅메뉴 선택프로그램
# 
# Copyright 2019 Kevin Kim <root@hamonikr.org>
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# check permission
if [[ $UID != 0 ]] ; then
    clear
    # dialog --title "프로그램 실행 권한 오류" --msgbox "이 프로그램은 실행을 위해서 루트 권한이 필요합니다.\n\nsudo $0 를 사용하세요" 8 80
    zenity --error --title="프로그램 실행 권한 오류" --text="이 프로그램은 실행을 위해서 루트 권한이 필요합니다.\n\nsudo $0 를 사용하세요" --width=300 --height=200
    exit 1
fi

AllMenusArr=()      # All menu options.
# Default for hide duplicate and triplicate options with (upstart) and (recovery mode)?
HideUpstartRecovery=false
if [[ $1 == short ]] ; then
    HideUpstartRecovery=true    # override default with first passed parameter "short"
elif [[ $1 == long ]] ; then
    HideUpstartRecovery=false   # override default with first passed parameter "long"
fi
SkippedMenuEntry=false  # Don't change this value, automatically maintained
InSubMenu=false     # Within a line beginning with `submenu`?
InMenuEntry=false   # Within a line beginning with `menuentry` and ending in `{`?
NextMenuEntryNo=0   # Next grub internal menu entry number to assign
# Major / Minor internal grub submenu numbers, ie `1>0`, `1>1`, `1>2`, etc.
ThisSubMenuMajorNo=0
NextSubMenuMinorNo=0
CurrTag=""          # Current grub internal menu number, zero based
CurrText=""         # Current grub menu option text, ie "Ubuntu", "Windows...", etc.
SubMenuList=""      # Only supports 10 submenus! Numbered 0 to 9. Future use.

while read -r line; do
    # Example: "           }"
    BlackLine="${line//[[:blank:]]/}" # Remove all whitespace
    if [[ $BlackLine == "}" ]] ; then
        # Add menu option in buffer
        if [[ $SkippedMenuEntry == true ]] ; then
            NextSubMenuMinorNo=$(( $NextSubMenuMinorNo + 1 ))
            SkippedMenuEntry=false
            continue
        fi
        if [[ $InMenuEntry == true ]] ; then
            InMenuEntry=false
            if [[ $InSubMenu == true ]] ; then
                NextSubMenuMinorNo=$(( $NextSubMenuMinorNo + 1 ))
            else
                NextMenuEntryNo=$(( $NextMenuEntryNo + 1 ))
            fi
        elif [[ $InSubMenu == true ]] ; then
            InSubMenu=false
            NextMenuEntryNo=$(( $NextMenuEntryNo + 1 ))
        else
            continue # Future error message?
        fi
        # Set maximum CurrText size to 68 characters.
        CurrText="${CurrText:0:67}"
        AllMenusArr+=($CurrTag "$CurrText")
    fi

    # Example: "menuentry 'Ubuntu' --class ubuntu --class gnu-linux --class gnu" ...
    #          "submenu 'Advanced options for Ubuntu' $menuentry_id_option" ...
    if [[ $line == submenu* ]] ; then
        # line starts with `submenu`
        InSubMenu=true
        ThisSubMenuMajorNo=$NextMenuEntryNo
        NextSubMenuMinorNo=0
        SubMenuList=$SubMenuList$ThisSubMenuMajorNo
        CurrTag=$NextMenuEntryNo
        CurrText="${line#*\'}"
        CurrText="${CurrText%%\'*}"
        AllMenusArr+=($CurrTag "$CurrText") # ie "1 Advanced options for Ubuntu"

    elif [[ $line == menuentry* ]] && [[ $line == *"{"* ]] ; then
        # line starts with `menuentry` and ends with `{`
        if [[ $HideUpstartRecovery == true ]] ; then
            if [[ $line == *"(upstart)"* ]] || [[ $line == *"(recovery mode)"* ]] ; then
                SkippedMenuEntry=true
                continue
            fi
        fi
        InMenuEntry=true
        if [[ $InSubMenu == true ]] ; then
            : # In a submenu, increment minor instead of major which is "sticky" now.
            CurrTag=$ThisSubMenuMajorNo">"$NextSubMenuMinorNo
        else
            CurrTag=$NextMenuEntryNo
        fi
        CurrText="${line#*\'}"
        CurrText="${CurrText%%\'*}"

    else
        continue    # Other stuff - Ignore it.
    fi

done < /boot/grub/grub.cfg

LongVersion=$(grub-install --version)
ShortVersion=$(echo "${LongVersion:20}")
DefaultItem=0

while true ; do

    Choice=$(zenity  --list  --text "부팅을 원하는 메뉴를 화살표 키로 선택하신후 엔터를 입력하세요" --column "NO" --column "부팅 가능한 메뉴들" \
    "$MenuText ${AllMenusArr[@]}" \
    --width=600 --height=300); 

    if [[ $Choice == "" ]]; then break ; fi
    DefaultItem=$Choice

    zenity --question --text="선택한 부팅 메뉴 \"$Choice\" 를 기본으로 설정하시겠습니까?\n\nYes 를 누르시면 시스템이 자동으로 재시작 됩니다.\n\n작업중인 데이터를 모두 저장하시기 바랍니다." --ok-label="Yes" --cancel-label="No" --width=300 --height=200

    # zenity --error --text="$? / $DefaultItem" 
    # break ; exit 0

    if [[ $? = 0 ]]; then 
        sudo sed -i '/GRUB_DEFAULT=/d' /etc/default/grub
        sudo sed -i '/GRUB_SAVEDEFAULT=/d' /etc/default/grub
        sudo sed -i '/GRUB_TIMEOUT=/d' /etc/default/grub
        echo "GRUB_DEFAULT=saved" | sudo tee -a /etc/default/grub 1>/dev/null
        echo "GRUB_SAVEDEFAULT=true" | sudo tee -a /etc/default/grub 1>/dev/null
        # timeout 변경 시 sudo update-grub 필요하며 이 과정은 시간이 걸리므로 일단 제외
        # echo "GRUB_TIMEOUT=5" | sudo tee -a /etc/default/grub 1>/dev/null
        sudo grub-set-default "$DefaultItem"
        sleep 1
        sudo reboot
    break ; 
    fi

done

exit 0